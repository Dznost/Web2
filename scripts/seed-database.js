const mongoose = require("mongoose")
const bcrypt = require("bcryptjs")

// Import models
const User = require("../models/User")
const Book = require("../models/Book")
const BorrowRequest = require("../models/BorrowRequest")
const BookRequest = require("../models/BookRequest")

// Connect to database
mongoose.connect("mongodb://localhost:27017/library-management", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})

async function seedDatabase() {
    try {
        console.log("üå± Starting database seeding...")

        // Clear existing data
        await User.deleteMany({})
        await Book.deleteMany({})
        await BorrowRequest.deleteMany({})
        await BookRequest.deleteMany({})

        console.log("üóëÔ∏è  Cleared existing data")

        // Create users
        const usersData = [
            // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n
            {
                username: "admin",
                email: "admin@library.com",
                password: "admin123",
                fullName: "Qu·∫£n tr·ªã vi√™n",
                role: "admin",
            },
            {
                username: "librarian",
                email: "librarian@library.com",
                password: "librarian123",
                fullName: "Nguy·ªÖn Th·ªã Th·ªß Th∆∞",
                role: "librarian",
            },
            {
                username: "student1",
                email: "student1@university.edu",
                password: "student123",
                fullName: "Tr·∫ßn VƒÉn Sinh Vi√™n",
                role: "student",
            },
            {
                username: "teacher1",
                email: "teacher1@university.edu",
                password: "teacher123",
                fullName: "L√™ Th·ªã Gi·∫£ng Vi√™n",
                role: "teacher",
            },
            {
                username: "reader1",
                email: "reader1@gmail.com",
                password: "reader123",
                fullName: "Ph·∫°m VƒÉn ƒê·ªôc Gi·∫£",
                role: "reader",
            },
        ]

        const createdUsers = []
        for (const userData of usersData) {
            const user = new User(userData)
            await user.save() // L∆∞u t·ª´ng ng∆∞·ªùi d√πng ƒë·ªÉ k√≠ch ho·∫°t pre('save') hook
            createdUsers.push(user)
        }
        console.log("üë• Created users:", createdUsers.length)

        // --- B·∫ÆT ƒê·∫¶U ƒêO·∫†N CODE KI·ªÇM TRA M·∫¨T KH·∫®U ---
        console.log("\nüîç Performing password verification test...")
        const adminUser = await User.findOne({ username: "admin" })
        if (adminUser) {
            console.log(`[Seed] Admin user found. Hashed password: ${adminUser.password.substring(0, 20)}...`)
            const isPasswordCorrect = await adminUser.comparePassword("admin123")
            console.log(`[Seed] Is 'admin123' correct for admin? ${isPasswordCorrect ? "‚úÖ YES" : "‚ùå NO"}`)
            if (!isPasswordCorrect) {
                console.error("üö® L·ªói: M·∫≠t kh·∫©u admin kh√¥ng kh·ªõp sau khi seed. C√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ v·ªõi bcryptjs ho·∫∑c User model.")
            }
        } else {
            console.error("üö® L·ªói: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng admin sau khi seed.")
        }
        console.log("--- K·∫æT TH√öC ƒêO·∫†N CODE KI·ªÇM TRA M·∫¨T KH·∫®U ---\n")
        // --- K·∫æT TH√öC ƒêO·∫†N CODE KI·ªÇM TRA M·∫¨T KH·∫®U ---

        // Create books (gi·ªØ nguy√™n ph·∫ßn n√†y)
        const books = [
            {
                bookId: "VH001",
                title: "Truy·ªán Ki·ªÅu",
                author: "Nguy·ªÖn Du",
                year: 1820,
                genre: "VƒÉn h·ªçc c·ªï ƒëi·ªÉn",
                summary: "T√°c ph·∫©m vƒÉn h·ªçc kinh ƒëi·ªÉn c·ªßa Vi·ªát Nam, k·ªÉ v·ªÅ cu·ªôc ƒë·ªùi ƒë·∫ßy gian tru√¢n c·ªßa Th√∫y Ki·ªÅu.",
                branches: { A: 5, B: 3, C: 4, D: 2 },
                image: "/placeholder.svg?height=300&width=200",
            },
            {
                bookId: "KH001",
                title: "V·∫≠t L√Ω ƒê·∫°i C∆∞∆°ng",
                author: "Nguy·ªÖn VƒÉn Khoa",
                year: 2020,
                genre: "Khoa h·ªçc",
                summary: "Gi√°o tr√¨nh v·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng d√†nh cho sinh vi√™n c√°c ng√†nh k·ªπ thu·∫≠t.",
                branches: { A: 10, B: 8, C: 6, D: 4 },
                image: "/placeholder.svg?height=300&width=200",
            },
            {
                bookId: "LS001",
                title: "L·ªãch S·ª≠ Vi·ªát Nam",
                author: "Tr·∫ßn Qu·ªëc V∆∞·ª£ng",
                year: 2018,
                genre: "L·ªãch s·ª≠",
                summary: "T·ªïng quan v·ªÅ l·ªãch s·ª≠ Vi·ªát Nam t·ª´ th·ªùi nguy√™n th·ªßy ƒë·∫øn hi·ªán ƒë·∫°i.",
                branches: { A: 7, B: 5, C: 8, D: 3 },
                image: "/placeholder.svg?height=300&width=200",
            },
            {
                bookId: "CN001",
                title: "L·∫≠p Tr√¨nh JavaScript",
                author: "L√™ Minh Ho√†ng",
                year: 2021,
                genre: "C√¥ng ngh·ªá",
                summary: "H∆∞·ªõng d·∫´n l·∫≠p tr√¨nh JavaScript t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.",
                branches: { A: 6, B: 4, C: 5, D: 7 },
                image: "/placeholder.svg?height=300&width=200",
            },
            {
                bookId: "VH002",
                title: "S·ªë ƒê·ªè",
                author: "V≈© Tr·ªçng Ph·ª•ng",
                year: 1936,
                genre: "VƒÉn h·ªçc hi·ªán ƒë·∫°i",
                summary: "Ti·ªÉu thuy·∫øt ph√™ ph√°n x√£ h·ªôi v·ªÅ t·ªá n·∫°n quan li√™u th·ªùi thu·ªôc ƒë·ªãa.",
                branches: { A: 4, B: 6, C: 3, D: 5 },
                image: "/placeholder.svg?height=300&width=200",
            },
            {
                bookId: "KT001",
                title: "Kinh T·∫ø H·ªçc Vi M√¥",
                author: "Nguy·ªÖn Th·ªã Lan",
                year: 2019,
                genre: "Kinh t·∫ø",
                summary: "Gi√°o tr√¨nh kinh t·∫ø h·ªçc vi m√¥ d√†nh cho sinh vi√™n kinh t·∫ø.",
                branches: { A: 8, B: 7, C: 6, D: 5 },
                image: "/placeholder.svg?height=300&width=200",
            },
            {
                bookId: "TT001",
                title: "T√¢m L√Ω H·ªçc ƒê·∫°i C∆∞∆°ng",
                author: "Ph·∫°m Minh H·∫°c",
                year: 2017,
                genre: "T√¢m l√Ω h·ªçc",
                summary: "Gi·ªõi thi·ªáu c√°c kh√°i ni·ªám c∆° b·∫£n v·ªÅ t√¢m l√Ω h·ªçc.",
                branches: { A: 5, B: 4, C: 7, D: 6 },
                image: "/placeholder.svg?height=300&width=200",
            },
            {
                bookId: "NN001",
                title: "English Grammar in Use",
                author: "Raymond Murphy",
                year: 2019,
                genre: "Ngo·∫°i ng·ªØ",
                summary: "S√°ch h·ªçc ng·ªØ ph√°p ti·∫øng Anh ph·ªï bi·∫øn nh·∫•t th·∫ø gi·ªõi.",
                branches: { A: 12, B: 10, C: 8, D: 6 },
                image: "/placeholder.svg?height=300&width=200",
            },
            {
                bookId: "TH001",
                title: "To√°n Cao C·∫•p",
                author: "ƒê·ªó C√¥ng Khanh",
                year: 2020,
                genre: "To√°n h·ªçc",
                summary: "Gi√°o tr√¨nh to√°n cao c·∫•p cho sinh vi√™n k·ªπ thu·∫≠t.",
                branches: { A: 9, B: 7, C: 8, D: 5 },
                image: "/placeholder.svg?height=300&width=200",
            },
            {
                bookId: "SK001",
                title: "T∆∞ Duy Nhanh v√† Ch·∫≠m",
                author: "Daniel Kahneman",
                year: 2011,
                genre: "T√¢m l√Ω h·ªçc",
                summary: "Kh√°m ph√° c√°ch th·ª©c ho·∫°t ƒë·ªông c·ªßa t∆∞ duy con ng∆∞·ªùi.",
                branches: { A: 6, B: 8, C: 4, D: 7 },
                image: "/placeholder.svg?height=300&width=200",
            },
        ]

        const createdBooks = await Book.insertMany(books)
        console.log("üìö Created books:", createdBooks.length)

        // Add some comments to books
        const bookWithComments = createdBooks[0] // Truy·ªán Ki·ªÅu
        bookWithComments.comments.push(
            {
                userId: createdUsers[2]._id,
                username: createdUsers[2].fullName,
                comment: "T√°c ph·∫©m kinh ƒëi·ªÉn c·ªßa vƒÉn h·ªçc Vi·ªát Nam, r·∫•t hay!",
                rating: 5,
            },
            {
                userId: createdUsers[4]._id,
                username: createdUsers[4].fullName,
                comment: "C√¢u chuy·ªán c·∫£m ƒë·ªông, vƒÉn ch∆∞∆°ng tuy·ªát v·ªùi.",
                rating: 5,
            },
        )
        await bookWithComments.save()

        // Create some borrow requests
        const borrowRequests = [
            {
                userId: createdUsers[2]._id, // student1
                bookId: createdBooks[1]._id, // V·∫≠t L√Ω ƒê·∫°i C∆∞∆°ng
                fullName: createdUsers[2].fullName,
                bookCode: createdBooks[1].bookId,
                bookTitle: createdBooks[1].title,
                branch: "A",
                pickupDate: new Date(Date.now() + 24 * 60 * 60 * 1000), // tomorrow
                status: "pending",
            },
            {
                userId: createdUsers[3]._id, // teacher1
                bookId: createdBooks[2]._id, // L·ªãch S·ª≠ Vi·ªát Nam
                fullName: createdUsers[3].fullName,
                bookCode: createdBooks[2].bookId,
                bookTitle: createdBooks[2].title,
                branch: "B",
                pickupDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // day after tomorrow
                status: "approved",
            },
        ]

        const createdBorrowRequests = await BorrowRequest.insertMany(borrowRequests)
        console.log("üìã Created borrow requests:", createdBorrowRequests.length)

        // Create some book requests
        const bookRequests = [
            {
                userId: createdUsers[2]._id,
                username: createdUsers[2].fullName,
                title: "Clean Code",
                author: "Robert C. Martin",
                year: 2008,
                genre: "C√¥ng ngh·ªá",
                summary: "H∆∞·ªõng d·∫´n vi·∫øt code s·∫°ch v√† d·ªÖ b·∫£o tr√¨.",
                reason: "C·∫ßn cho vi·ªác h·ªçc l·∫≠p tr√¨nh v√† ph√°t tri·ªÉn ph·∫ßn m·ªÅm.",
                status: "pending",
            },
            {
                userId: createdUsers[4]._id,
                username: createdUsers[4].fullName,
                title: "Sapiens",
                author: "Yuval Noah Harari",
                year: 2011,
                genre: "L·ªãch s·ª≠",
                summary: "L·ªãch s·ª≠ ng·∫Øn g·ªçn v·ªÅ lo√†i ng∆∞·ªùi.",
                reason: "Mu·ªën t√¨m hi·ªÉu v·ªÅ l·ªãch s·ª≠ v√† ti·∫øn h√≥a c·ªßa lo√†i ng∆∞·ªùi.",
                status: "pending",
            },
        ]

        const createdBookRequests = await BookRequest.insertMany(bookRequests)
        console.log("üìù Created book requests:", createdBookRequests.length)

        console.log("‚úÖ Database seeding completed successfully!")
        console.log("\nüìã Summary:")
        console.log(`üë• Users: ${createdUsers.length}`)
        console.log(`üìö Books: ${createdBooks.length}`)
        console.log(`üìã Borrow Requests: ${createdBorrowRequests.length}`)
        console.log(`üìù Book Requests: ${createdBookRequests.length}`)

        console.log("\nüîë Login credentials:")
        console.log("Admin: admin / admin123")
        console.log("Librarian: librarian / librarian123")
        console.log("Student: student1 / student123")
        console.log("Teacher: teacher1 / teacher123")
        console.log("Reader: reader1 / reader123")
    } catch (error) {
        console.error("‚ùå Error seeding database:", error)
    } finally {
        mongoose.connection.close()
    }
}

// Run the seeding function
seedDatabase()
